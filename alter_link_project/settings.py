"""
Django settings for alter_link_project project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# my imports
import json
import logging
from django.core.exceptions import ImproperlyConfigured

from django.utils.translation import gettext_lazy as _
from django.utils.translation import pgettext_lazy



# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# lower thing from setting secret is from site https://stackoverflow.com/questions/42077532/django-security-and-settings
with open(os.path.join(BASE_DIR, '../other_stuff/secrets_mw.json')) as secrets_file:
    secrets = json.load(secrets_file)

def get_secret(setting, secrets=secrets):
    """Get secret setting or fail with ImproperlyConfigured"""
    try:
        return secrets[setting]
    except KeyError:
        raise ImproperlyConfigured("Set the {} setting".format(setting))


#################################
#### Production settings - START


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#with open('C:\User\mmwie\OneDrive\Documents\_DevMW\alter_link_django\other_stuff\kluczyk.txt') as f:
#    SECRET_KEY = get_secret('SECRET_KEY')

SECRET_KEY = get_secret('SECRET_KEY')



# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'alter-link.com', 'alter-link.pl','192.168.88.250', '192.168.43.155', '192.168.88.84', '192.168.88.251', '192.168.88.51', '192.168.88.46']


# CSRF_COOKIE_SECURE = True
# SESSION_COOKIE_SECURE = True


#### Production settings - STOP
#################################



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'django.contrib.sites', #https://docs.djangoproject.com/en/3.1/ref/contrib/flatpages/
    
    'django.contrib.humanize',

    # 3rd party apps
    'nested_admin',
    # 'rest_framework',
    # 'useralter.apps.UseralterConfig',
    'crispy_forms',
    'social_django',
    'sass_processor',
    'request',
    # 'ratelimit',
    'meta',

    # deleting app https://patrick.cloke.us/posts/2020/01/23/cleanly-removing-a-django-app-with-models/
    # my apps
    'altlink',
    'useralter',


]

CRISPY_TEMPLATE_PACK = 'bootstrap4'


MIDDLEWARE = [
    'altlink.middleware.reverse_proxy_digital_ocean_alterlink',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'request.middleware.RequestMiddleware', # Add request.middleware.RequestMiddleware to MIDDLEWARE. If you use django.contrib.auth.middleware.AuthenticationMiddleware, place RequestMiddleware after it. If you use django.contrib.flatpages.middleware.FlatpageFallbackMiddleware place request.middleware.RequestMiddleware before it else flatpages will be marked as error pages in the admin panel. https://django-request.readthedocs.io/en/latest/index.html#quick-start-guide
    # 'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware', #https://docs.djangoproject.com/en/3.1/ref/contrib/flatpages/
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # 3rd party apps
    'ratelimit.middleware.RatelimitMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
]

ROOT_URLCONF = 'alter_link_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                # 3rd party apps
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',

                # my context processors
                'altlink.context_processors.base_context_processor',
            ],
        },
    },
]

WSGI_APPLICATION = 'alter_link_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'alterlinkdb',
        'USER': 'postgres',
        'PASSWORD': get_secret('DB_PASSWORD'),
        'HOST': 'localhost',
        'PORT': '5432'
    }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# SASS/SCSS with Django based on https://engineertodeveloper.com/how-to-easily-use-sass-scss-with-django/
STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'sass_processor.finders.CssFinder',
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGES = [
    ('en', _('English')),
    ('pl', _('Polish')),
]

# LANGUAGE_CODE = 'en-us'
# LANGUAGE_CODE = 'pl'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# https://docs.djangoproject.com/en/3.0/topics/i18n/translation/#message-files
# https://www.youtube.com/watch?v=xI97sLMd1rM
LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), 'static_cdn')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(os.path.dirname(BASE_DIR), 'media_cdn')

#idea from https://engineertodeveloper.com/how-to-easily-use-sass-scss-with-django/
SASS_PROCESSOR_ROOT = STATIC_ROOT
SASS_PRECISION = 8


# alter_link_project stuff added manually
#

# email or username can be in login field https://stackoverflow.com/a/35836674/11423556
AUTHENTICATION_BACKENDS = (
    # useralter app
    'useralter.backends.EmailOrUsernameModelBackend',

    # 3rd party apps
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',
)

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'
# EMAIL_FILE_PATH = os.path.join(os.path.dirname(BASE_DIR), 'sent_emails')

#custom user model
AUTH_USER_MODEL = 'useralter.UserCustomAlter'

#custom login URLs
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
LOGIN_URL = '/accounts/login/'


# social-auth-app-django
#
SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'social_core.pipeline.user.create_user',
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'social_core.pipeline.user.user_details',
)

SOCIAL_AUTH_STRATEGY = 'social_django.strategy.DjangoStrategy'
SOCIAL_AUTH_STORAGE = 'social_django.models.DjangoStorage'

SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = get_secret('SOCIAL_AUTH_GOOGLE_OAUTH2_KEY')
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = get_secret('SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET')


# django-request - https://django-request.readthedocs.io/en/latest/settings.html
#
REQUEST_IGNORE_PATHS = (
    r'^admin/',
    r'^favicon.ico',
)

REQUEST_TRAFFIC_MODULES = (
    'request.traffic.UniqueVisitor',
    'request.traffic.UniqueVisit',
    'request.traffic.Hit',
    'request.traffic.Ajax',
    'request.traffic.NotAjax',
    'request.traffic.Error',
    'request.traffic.Error404',
    'request.traffic.Search',
    'request.traffic.Secure',
    'request.traffic.Unsecure',
    'request.traffic.User',
    'request.traffic.UniqueUser',
)

REQUEST_PLUGINS = (
    'request.plugins.TrafficInformation',
    'request.plugins.LatestRequests',
    'request.plugins.TopPaths',
    'request.plugins.TopErrorPaths',
    'request.plugins.TopReferrers',
    'request.plugins.TopSearchPhrases',
    'request.plugins.TopBrowsers',
    'request.plugins.ActiveUsers',
)

# REQUEST_LOG_IP = False

# idea of cache's from https://github.com/django-pymemcache/django-pymemcache
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',
        'LOCATION': '127.0.0.1:11211',
    }
}
# CACHES = {
#     'default': {
#         'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
#         'LOCATION': 'ratelimit-tests',
#     },
# }

# django-ratelimit - https://django-ratelimit.readthedocs.io/en/stable/settings.html
#
# RATELIMIT_CACHE_PREFIX = 'rl:'
RATELIMIT_ENABLE = True
RATELIMIT_USE_CACHE = 'default'
RATELIMIT_VIEW = 'altlink.views.ratelimited_error'

# django-meta - https://django-meta.readthedocs.io/en/latest/settings.html
META_SITE_PROTOCOL = 'https'
META_SITE_DOMAIN = 'www.alter-link.com'
META_SITE_TYPE = 'article'
META_SITE_NAME = 'alter-link.com - search the alternative'
META_DEFAULT_KEYWORDS = [ pgettext_lazy('alternatywne','alternative'), _('alter'), _('alernative infromation'), _('search alternative') ]
# META_USE_SITES = True
META_USE_OG_PROPERTIES = True
META_USE_TWITTER_PROPERTIES = True
META_USE_SCHEMAORG_PROPERTIES = True
